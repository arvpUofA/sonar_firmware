/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/isthatme/Documents/Clubs/ARVP/sonar_firmware/dsdl/uavcan/tunnel/2010.Broadcast.uavcan
 */

#ifndef __UAVCAN_TUNNEL_BROADCAST
#define __UAVCAN_TUNNEL_BROADCAST

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan/tunnel/Protocol.h>

/******************************* Source text **********************************
#
# This message struct carries arbitrary data in the format of the specified high-level protocol.
# The data will be delivered to all nodes that are interested in tunneled protocols.
# Finer addressing schemes may be implemented using the means provided by the encapsulated protocol.
# The channelID allows for additional routing between the source and target nodes.

Protocol protocol
uint8 channel_id

uint8[<=60] buffer    # TAO rules apply
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.tunnel.Broadcast
uavcan.tunnel.Protocol protocol
saturated uint8 channel_id
saturated uint8[<=60] buffer
******************************************************************************/

#define UAVCAN_TUNNEL_BROADCAST_ID                         2010
#define UAVCAN_TUNNEL_BROADCAST_NAME                       "uavcan.tunnel.Broadcast"
#define UAVCAN_TUNNEL_BROADCAST_SIGNATURE                  (0x5AA2D4D9CF4B1E85ULL)

#define UAVCAN_TUNNEL_BROADCAST_MAX_SIZE                   ((502 + 7)/8)

// Constants

#define UAVCAN_TUNNEL_BROADCAST_BUFFER_MAX_LENGTH                                        60

typedef struct
{
    // FieldTypes
    uavcan_tunnel_Protocol protocol;                      //
    uint8_t    channel_id;                    // bit len 8
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[60] max items
    } buffer;

} uavcan_tunnel_Broadcast;

extern
uint32_t uavcan_tunnel_Broadcast_encode(uavcan_tunnel_Broadcast* source, void* msg_buf);

extern
int32_t uavcan_tunnel_Broadcast_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_Broadcast* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_tunnel_Broadcast_encode_internal(uavcan_tunnel_Broadcast* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_tunnel_Broadcast_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_Broadcast* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_TUNNEL_BROADCAST